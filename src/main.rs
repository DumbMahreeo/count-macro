use std::collections::HashMap;

use count_macro::{wrapping_count, count};

macro_rules! map_items {
    ($($v:expr),*) => {
        {
            let mut map = HashMap::new();
            wrapping_count!(
                $(map.insert(_i32_, $v));*
            );
            map
        }
    };
}

fn main() {
    let map = map_items!('a', 'b', 'c');

    println!("{:#?}", map);

        let my_vec = count!(
            vec!(
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_,
                _u8_
            )
        );

        println!("{:#?}", my_vec);
}
